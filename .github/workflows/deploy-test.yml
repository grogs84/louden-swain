name: Deploy to Test Environment

on:
  push:
    branches: [test, copilot/fix-62ddb195-c081-464c-85d1-cffb9f6c9f61]
  # Enable manual deployment
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    name: Quality Gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: cd frontend && npm install --legacy-peer-deps

      - name: Run frontend linting
        run: cd frontend && npm run lint

      - name: Run frontend type checking
        run: cd frontend && npm run type-check

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend tests
        run: cd backend && python -m pytest -v
        env:
          DATABASE_URL: sqlite+aiosqlite:///./test.db

  deploy:
    needs: quality-gates
    runs-on: ubuntu-latest
    name: Deploy to Vercel Test Environment
    environment: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_TEST }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        id: deploy

      - name: Get deployment URL
        run: echo "DEPLOYMENT_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -E 'https://.*-.*vercel\.app' | head -1 | awk '{print $2}')" >> $GITHUB_ENV

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'ðŸš€ Test environment deployment successful!\n\nDeployment URL: ${{ env.DEPLOYMENT_URL }}'
            })